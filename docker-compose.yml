version: "3.8"

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: electra-frontend-${ENVIRONMENT}
    environment:
      - VITE_API_BASE_URL=//api.${DOMAIN}
    depends_on:
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.electra-frontend-${ENVIRONMENT}.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.electra-frontend-${ENVIRONMENT}.entrypoints=websecure"
      - "traefik.http.routers.electra-frontend-${ENVIRONMENT}.tls=true"
      - "traefik.http.routers.electra-frontend-${ENVIRONMENT}.tls.certresolver=cloudflare"
      - "traefik.http.routers.electra-frontend-${ENVIRONMENT}.middlewares=auth-admin@docker"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    env_file:
      - .env
    networks:
      - web
      - default

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: electra-backend-${ENVIRONMENT}
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/electra_${ENVIRONMENT}
      - ENVIRONMENT=${ENVIRONMENT}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - ./backend/database-tools:/app/database-tools
      - ./backend/database-tools/sitzverteilung:/app/database-tools/sitzverteilung
      - ./backend/database-tools/topTen:/app/database-tools/topTen
    command: >
      sh -c "
        python -c 'import psycopg2; conn = psycopg2.connect(\"dbname=electra_${ENVIRONMENT} user=postgres password=postgres host=db\"); cur = conn.cursor(); cur.execute(\"SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = \'wahlen\')\"); is_initialized = cur.fetchone()[0]; cur.close(); conn.close(); exit(0 if is_initialized else 1)' && 
        echo \"Database already initialized, skipping setup...\" || 
        (echo \"Database not initialized, running setup...\" && python database-tools/scripts/setup_database.py) && 
        python run_server.py dev
      "
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.electra-backend-${ENVIRONMENT}.rule=Host(`api.${DOMAIN}`)"
      - "traefik.http.routers.electra-backend-${ENVIRONMENT}.entrypoints=websecure"
      - "traefik.http.routers.electra-backend-${ENVIRONMENT}.tls=true"
      - "traefik.http.routers.electra-backend-${ENVIRONMENT}.tls.certresolver=cloudflare"
    env_file:
      - .env
    networks:
      - web
      - default

  db:
    image: postgres:17.1
    container_name: electra-db-${ENVIRONMENT}
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=electra_${ENVIRONMENT}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    env_file:
      - .env
    networks:
      - default

networks:
  web:
    external: true
