/* tslint:disable */
/* eslint-disable */
/**
 * Bundestagswahlsystem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthenticatedResponse,
  AuthenticationRequest,
  Direktkandidaten,
  VoteRequest,
  WahlzettelParteien,
} from '../models/index';
import {
    AuthenticatedResponseFromJSON,
    AuthenticatedResponseToJSON,
    AuthenticationRequestFromJSON,
    AuthenticationRequestToJSON,
    DirektkandidatenFromJSON,
    DirektkandidatenToJSON,
    VoteRequestFromJSON,
    VoteRequestToJSON,
    WahlzettelParteienFromJSON,
    WahlzettelParteienToJSON,
} from '../models/index';

export interface AuthenticateRequest {
    authenticationRequest: AuthenticationRequest;
}

export interface GetCompetingPartiesRequest {
    wahlid: number;
    wahlkreisid: number;
}

export interface GetDirektkandidatenRequest {
    wahlid: number;
    wahlkreisid: number;
}

export interface VoteOperationRequest {
    voteRequest: VoteRequest;
}

/**
 * 
 */
export class ElectApi extends runtime.BaseAPI {

    /**
     */
    async authenticateRaw(requestParameters: AuthenticateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatedResponse>> {
        if (requestParameters['authenticationRequest'] == null) {
            throw new runtime.RequiredError(
                'authenticationRequest',
                'Required parameter "authenticationRequest" was null or undefined when calling authenticate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/elect/authenticate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationRequestToJSON(requestParameters['authenticationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatedResponseFromJSON(jsonValue));
    }

    /**
     */
    async authenticate(requestParameters: AuthenticateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatedResponse> {
        const response = await this.authenticateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCompetingPartiesRaw(requestParameters: GetCompetingPartiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WahlzettelParteien>> {
        if (requestParameters['wahlid'] == null) {
            throw new runtime.RequiredError(
                'wahlid',
                'Required parameter "wahlid" was null or undefined when calling getCompetingParties().'
            );
        }

        if (requestParameters['wahlkreisid'] == null) {
            throw new runtime.RequiredError(
                'wahlkreisid',
                'Required parameter "wahlkreisid" was null or undefined when calling getCompetingParties().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/elect/{wahlid}/parteien/{wahlkreisid}`.replace(`{${"wahlid"}}`, encodeURIComponent(String(requestParameters['wahlid']))).replace(`{${"wahlkreisid"}}`, encodeURIComponent(String(requestParameters['wahlkreisid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WahlzettelParteienFromJSON(jsonValue));
    }

    /**
     */
    async getCompetingParties(requestParameters: GetCompetingPartiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WahlzettelParteien> {
        const response = await this.getCompetingPartiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDirektkandidatenRaw(requestParameters: GetDirektkandidatenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Direktkandidaten>> {
        if (requestParameters['wahlid'] == null) {
            throw new runtime.RequiredError(
                'wahlid',
                'Required parameter "wahlid" was null or undefined when calling getDirektkandidaten().'
            );
        }

        if (requestParameters['wahlkreisid'] == null) {
            throw new runtime.RequiredError(
                'wahlkreisid',
                'Required parameter "wahlkreisid" was null or undefined when calling getDirektkandidaten().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/elect/{wahlid}/direktkandidaten/{wahlkreisid}`.replace(`{${"wahlid"}}`, encodeURIComponent(String(requestParameters['wahlid']))).replace(`{${"wahlkreisid"}}`, encodeURIComponent(String(requestParameters['wahlkreisid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DirektkandidatenFromJSON(jsonValue));
    }

    /**
     */
    async getDirektkandidaten(requestParameters: GetDirektkandidatenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Direktkandidaten> {
        const response = await this.getDirektkandidatenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async voteRaw(requestParameters: VoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['voteRequest'] == null) {
            throw new runtime.RequiredError(
                'voteRequest',
                'Required parameter "voteRequest" was null or undefined when calling vote().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/elect/vote`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VoteRequestToJSON(requestParameters['voteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async vote(requestParameters: VoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.voteRaw(requestParameters, initOverrides);
    }

}
