/* tslint:disable */
/* eslint-disable */
/**
 * Bundestagswahlsystem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Abgeordneter,
  ClosestWinners,
  SeatDistribution,
  Stimmanteil,
  Ueberhang,
} from '../models/index';
import {
    AbgeordneterFromJSON,
    AbgeordneterToJSON,
    ClosestWinnersFromJSON,
    ClosestWinnersToJSON,
    SeatDistributionFromJSON,
    SeatDistributionToJSON,
    StimmanteilFromJSON,
    StimmanteilToJSON,
    UeberhangFromJSON,
    UeberhangToJSON,
} from '../models/index';

export interface GetAbgeordneteRequest {
    wahlid: number;
}

export interface GetClosestWinnersRequest {
    wahlid: number;
    parteiid: number;
}

export interface GetErststimmenRequest {
    wahlid: number;
}

export interface GetSitzverteilungRequest {
    wahlid: number;
}

export interface GetUeberhangRequest {
    wahlid: number;
    parteiid: number;
}

export interface GetZweitstimmenRequest {
    wahlid: number;
}

/**
 * 
 */
export class GlobalApi extends runtime.BaseAPI {

    /**
     */
    async getAbgeordneteRaw(requestParameters: GetAbgeordneteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Abgeordneter>>> {
        if (requestParameters['wahlid'] == null) {
            throw new runtime.RequiredError(
                'wahlid',
                'Required parameter "wahlid" was null or undefined when calling getAbgeordnete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/results/{wahlid}/abgeordnete`.replace(`{${"wahlid"}}`, encodeURIComponent(String(requestParameters['wahlid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AbgeordneterFromJSON));
    }

    /**
     */
    async getAbgeordnete(requestParameters: GetAbgeordneteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Abgeordneter>> {
        const response = await this.getAbgeordneteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getClosestWinnersRaw(requestParameters: GetClosestWinnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClosestWinners>> {
        if (requestParameters['wahlid'] == null) {
            throw new runtime.RequiredError(
                'wahlid',
                'Required parameter "wahlid" was null or undefined when calling getClosestWinners().'
            );
        }

        if (requestParameters['parteiid'] == null) {
            throw new runtime.RequiredError(
                'parteiid',
                'Required parameter "parteiid" was null or undefined when calling getClosestWinners().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/results/{wahlid}/{parteiid}/closestwinners`.replace(`{${"wahlid"}}`, encodeURIComponent(String(requestParameters['wahlid']))).replace(`{${"parteiid"}}`, encodeURIComponent(String(requestParameters['parteiid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClosestWinnersFromJSON(jsonValue));
    }

    /**
     */
    async getClosestWinners(requestParameters: GetClosestWinnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClosestWinners> {
        const response = await this.getClosestWinnersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getErststimmenRaw(requestParameters: GetErststimmenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Stimmanteil>>> {
        if (requestParameters['wahlid'] == null) {
            throw new runtime.RequiredError(
                'wahlid',
                'Required parameter "wahlid" was null or undefined when calling getErststimmen().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/results/{wahlid}/stimmanteil/erststimmen`.replace(`{${"wahlid"}}`, encodeURIComponent(String(requestParameters['wahlid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StimmanteilFromJSON));
    }

    /**
     */
    async getErststimmen(requestParameters: GetErststimmenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Stimmanteil>> {
        const response = await this.getErststimmenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSitzverteilungRaw(requestParameters: GetSitzverteilungRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SeatDistribution>> {
        if (requestParameters['wahlid'] == null) {
            throw new runtime.RequiredError(
                'wahlid',
                'Required parameter "wahlid" was null or undefined when calling getSitzverteilung().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/results/{wahlid}/sitzverteilung`.replace(`{${"wahlid"}}`, encodeURIComponent(String(requestParameters['wahlid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SeatDistributionFromJSON(jsonValue));
    }

    /**
     */
    async getSitzverteilung(requestParameters: GetSitzverteilungRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SeatDistribution> {
        const response = await this.getSitzverteilungRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUeberhangRaw(requestParameters: GetUeberhangRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ueberhang>> {
        if (requestParameters['wahlid'] == null) {
            throw new runtime.RequiredError(
                'wahlid',
                'Required parameter "wahlid" was null or undefined when calling getUeberhang().'
            );
        }

        if (requestParameters['parteiid'] == null) {
            throw new runtime.RequiredError(
                'parteiid',
                'Required parameter "parteiid" was null or undefined when calling getUeberhang().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/results/{wahlid}/ueberhang/{parteiid}`.replace(`{${"wahlid"}}`, encodeURIComponent(String(requestParameters['wahlid']))).replace(`{${"parteiid"}}`, encodeURIComponent(String(requestParameters['parteiid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UeberhangFromJSON(jsonValue));
    }

    /**
     */
    async getUeberhang(requestParameters: GetUeberhangRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ueberhang> {
        const response = await this.getUeberhangRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getZweitstimmenRaw(requestParameters: GetZweitstimmenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Stimmanteil>>> {
        if (requestParameters['wahlid'] == null) {
            throw new runtime.RequiredError(
                'wahlid',
                'Required parameter "wahlid" was null or undefined when calling getZweitstimmen().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/results/{wahlid}/stimmanteil/zweitstimmen`.replace(`{${"wahlid"}}`, encodeURIComponent(String(requestParameters['wahlid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StimmanteilFromJSON));
    }

    /**
     */
    async getZweitstimmen(requestParameters: GetZweitstimmenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Stimmanteil>> {
        const response = await this.getZweitstimmenRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
