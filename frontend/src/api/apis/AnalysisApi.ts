/* tslint:disable */
/* eslint-disable */
/**
 * Bundestagswahlsystem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Auslaenderanteil,
  Berufsgruppen,
  Einkommen,
} from '../models/index';
import {
    AuslaenderanteilFromJSON,
    AuslaenderanteilToJSON,
    BerufsgruppenFromJSON,
    BerufsgruppenToJSON,
    EinkommenFromJSON,
    EinkommenToJSON,
} from '../models/index';

export interface GetBerufsgruppenRequest {
    wahlid: number;
    parteiid: number;
    onlyAbgeordnete?: boolean;
}

export interface GetForeignersRequest {
    wahlid: number;
    parteiid: number;
}

export interface GetIncomeRequest {
    wahlid: number;
    parteiid: number;
}

/**
 * 
 */
export class AnalysisApi extends runtime.BaseAPI {

    /**
     */
    async getBerufsgruppenRaw(requestParameters: GetBerufsgruppenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Berufsgruppen>> {
        if (requestParameters['wahlid'] == null) {
            throw new runtime.RequiredError(
                'wahlid',
                'Required parameter "wahlid" was null or undefined when calling getBerufsgruppen().'
            );
        }

        if (requestParameters['parteiid'] == null) {
            throw new runtime.RequiredError(
                'parteiid',
                'Required parameter "parteiid" was null or undefined when calling getBerufsgruppen().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['onlyAbgeordnete'] != null) {
            queryParameters['only_abgeordnete'] = requestParameters['onlyAbgeordnete'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/results/{wahlid}/berufsgruppen/{parteiid}`.replace(`{${"wahlid"}}`, encodeURIComponent(String(requestParameters['wahlid']))).replace(`{${"parteiid"}}`, encodeURIComponent(String(requestParameters['parteiid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BerufsgruppenFromJSON(jsonValue));
    }

    /**
     */
    async getBerufsgruppen(requestParameters: GetBerufsgruppenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Berufsgruppen> {
        const response = await this.getBerufsgruppenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getForeignersRaw(requestParameters: GetForeignersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Auslaenderanteil>> {
        if (requestParameters['wahlid'] == null) {
            throw new runtime.RequiredError(
                'wahlid',
                'Required parameter "wahlid" was null or undefined when calling getForeigners().'
            );
        }

        if (requestParameters['parteiid'] == null) {
            throw new runtime.RequiredError(
                'parteiid',
                'Required parameter "parteiid" was null or undefined when calling getForeigners().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/results/{wahlid}/auslaenderanteil/{parteiid}/`.replace(`{${"wahlid"}}`, encodeURIComponent(String(requestParameters['wahlid']))).replace(`{${"parteiid"}}`, encodeURIComponent(String(requestParameters['parteiid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuslaenderanteilFromJSON(jsonValue));
    }

    /**
     */
    async getForeigners(requestParameters: GetForeignersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Auslaenderanteil> {
        const response = await this.getForeignersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getIncomeRaw(requestParameters: GetIncomeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Einkommen>> {
        if (requestParameters['wahlid'] == null) {
            throw new runtime.RequiredError(
                'wahlid',
                'Required parameter "wahlid" was null or undefined when calling getIncome().'
            );
        }

        if (requestParameters['parteiid'] == null) {
            throw new runtime.RequiredError(
                'parteiid',
                'Required parameter "parteiid" was null or undefined when calling getIncome().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/results/{wahlid}/income/{parteiid}/`.replace(`{${"wahlid"}}`, encodeURIComponent(String(requestParameters['wahlid']))).replace(`{${"parteiid"}}`, encodeURIComponent(String(requestParameters['parteiid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EinkommenFromJSON(jsonValue));
    }

    /**
     */
    async getIncome(requestParameters: GetIncomeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Einkommen> {
        const response = await this.getIncomeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
